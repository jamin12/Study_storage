
"패킷에 대해서 그래도 좀 배웠죠."
"대략적인 걸.",
"그래서 좀 고급 주제를 다뤄보려고 합니다."
"어쩌면 제 수업의 가장 큰 장점이라고 할까요?"
"그러니까 전체적인 흐름을 보여드리는 것이 제가 가진 장점 중에 하나인데 그게 이제 문제는"
"뭐냐면 그런 얘기를 하자면 아직 배우지 않은 걸 몇 가지를 다뤄야 됩니다."
"그래서 음 그냥 종합적으로 한번 오버뷰를 한다는 느낌으로 이 영상, 이 수업을 들으셨으면"
"좋겠어요. 그리고 굉장히 길 겁니다."
"한 최대 1시간이 걸릴 수도 있을 것 같아요."
"어쨌든 끊지 않고 쭉 가보겠습니다."
"나중에 보시는 분들 끊어서 보세요."
"자, 어쩔 수가 없어요."
"끊으면 안 돼. 이해해 주시고요."
"주제어로 일단 하나 던지고 싶은 말이 뭐냐면 프랑스죠?"
"프랑스 파리에서 만약에 에펠탑을 택배로 보내려고만 하면 이게 가능할까요?"
"가능은 하겠죠 그러려면은 첫 번째로 일단 에펠탑을 어떻게 해야 될까요?"
"네 이거를 분해를 해야 되지 않을까요?"
"이걸 분해해가지고 뭐 분해를 해서 이제 좀 크기를 줄여야 되겠죠"
"크기 이제 크기를 줄이는데 이게 어떤 그 박스 안에 들어갈 수 갈 수 있을 정도 즉"
"택배라는 형태로 이 체계로 운송 가능한 즉 MTU 이하로 줄여야 되겠죠"
"그렇게 해서 다 분해를 한 다음에 그 다음에 어떻게 하면 돼요",
"이제 자 우선 이제 분해한 다음에 뭐 그 다음에는 이제 2번 운송하면 되겠죠"
"그 다음 뭐에요"
"이제 그렇죠."
"조립해야죠. 뭐 상당히 심플합니다."
"그러니까 파리에서 에펠탑을 택배로 보내려면 이렇게 하면 되죠."
"분해했다가 운송하고 조립하면 됩니다."
"말은 쉬운데 물론 이게 이제 좀 간단하진 않겠죠."
"자 그러면 여기서 이제 지엽적인 것 하나만 엮어서 생각을 했으면 좋겠는데 뭐냐면은 분해라고"
"하는 것은 송신 측에서 하겠죠."
"그럼 조립은 어디서 합니까?"
"당연히 수신 측에서 합니다."
"자 제가 이 MTU를 언급했죠?"
"그럼 이거 하나가 이제 패킷이 되겠네요."
"그러면 이제 인터넷이라는 정보의 물류체계에서 패킷이라는 단위로 데이터가 유통되죠."
"자 그러면 패킷이 어떻게 생성되는지를 사실 간단하게 말씀을 드렸어요."
"개념적인 표현으로. 근데 그렇게만 아시면 좀 곤란합니다."
"그래서 좀 종합적인 흐름, 전체적인 흐름을 좀 이야기를 좀 하려고 하는데 이 흐름을"
"얘기하는데 이 흐름이란 말이 나왔다는 것은 저는 일단 TCP/IP 에 대해서 한번에"
"묶어서 설명을 하겠다는 겁니다."
"근데 우리가 아직 tcp 공부를 하지 않았죠."
"IP만 겨우 그것도 이제 일부만 좀 한 상황인데 우선은 패킷이 생성되는 과정은 본 것"
"같아요 그래서 어쨌든 종합적으로 그림을 좀 보려고 합니다"
"자 이런 그림이 있다라고 가정을 해 볼게요"
"자 이거 뭐냐면 좀 내릴까요?"
"조금만 내립시다."
"무슨 얘기를 하고 싶은 거냐면 이런 상황을 한번 생각을 해 볼게요."
"여기 어떤 PC가 이렇게 한 대 있는데 이 PC가 L2 액세스 스위치에 연결해서 라우터를"
"거쳐서 인터넷에 도달 하겠죠."
"이렇게 인터넷에 그러면 이 인터넷 어딘가에 똑같이 라우터를 거쳐서 L2 액세스가 있겠죠."
"그걸 거쳐서 어떤 서버 같은 게 이렇게 있다고 가정을 해봅시다 그러면 예를 들어서 만약에"
"여러분이 무슨 여기가 네이버라고 해볼까요"
"네이버 같은 데서 여러분이 그 자료실 같은 데서 파일 하나를 다운로드를 받는다라고 생각을"
"해볼게요 그러면 이 파일 다운로드라고 하는 것은 사실은 네이버 입장에서는 정보, 파일이라는"
"정보를 얘는 송신하는 거고 PC 쪽에서는 그걸 당연히 수신하는 거겠죠."
"그런데 이때 중요한 것은 인터넷 구간이라는 곳에서 정보가 유통될 때는 패킷의 형태로 간단"
"말이죠. 그런데 만약에 파일이 1.4MB 정도 됐다고 가정해 볼게요."
"그럼 패킷의 mtu가 겨우 1.4x 킬로바이트밖에 안되거든요"
"그럼 둘의 차이가 어마어마하죠"
"대략 한 1024 이상 차이가 나요"
"그러니까 굉장히 1024배 글씨가 잘렸네요"
"요정도만큼 차이가 나요"
"그러니까는 대략 따져봐도 대략만 따져봐도 이 겨우 요정도를 보낼 때 즉 1000개 이상"
"1000개 이상의 패킷으로 바뀌어서 날라간다는 얘기에요"
"그리고 결국 이 파일을 보내거나 송신하거나 수신하는 것은 기본적으로 PC라고 혹은 서버라고"
"제가 말했지만 정확히 말하면 여기서 작동 중인 어떤 프로세스가 파일을 보내거나 파일을 받는"
"거죠 그래서 이런 상황을 가정하고 조금 더 깊이 있게 설명을 드려보려고 해요"
"자 여기 우선은 파일을 만약에 tcp ip 로 보낸다고 가정을 해보면 이렇게 tcp ip"
"통신을 하겠다 그럼 tcp 라는 것은 연결지향, connection oriented"
"protocol 이거든요"
"그래서 그 연결이라는 걸 한 다음에 연결이라는 거 뭐 여러분 전화 생각해 보세요"
"별거 없죠? 전화를 걸어요"
"그러면 신호 대기음이 쭉 울리다가 전화를 받으면 여보세요 하면서 그때부터 통화가 되는 거죠"
"연결됐다는 것이 통화 연결되는 것 같아요."
"그거랑 비슷하게 생각하시면 돼요."
"그러면 그 TCP 연결이 됐다는 가정 하에 이제 송수신이 이루어져요."
"그러면 그렇게 연결이 잘 됐다고 가정을 하고 여기를 만약에 연결이 됐는데 이쪽을 서버라고"
"한번 생각을 해볼게요."
"여기가 만약에 네이버의 웹서버일 수도 있겠죠."
"어떤 서버가 이렇게 프로세스가 뭔가"
"얘가 웹서버일 수도 있고요."
"이제 인터페이스가 하나 있는데 당연히 이것은 소켓이죠."
"예 본질은 파일이다"
"뭐 여러 번 말씀드렸구요 그래서"
"이제 소켓은 tcp라는 그 커널의 구성요소인 tcp 프로그램에 대한 추상화된 인터페이스죠"
"그래서 이게 이제 제가 파일이라는 점을 말씀을 드렸는데 여러분 저 이 수업 듣기 전에 제가"
"버퍼라는 말을 알고 있느냐"
"이런 말을 했어요"
"근데 이제 그 얘기를 좀 하려고 해요"
"자 여기 이 서버 프로세스 이게 웹서버 일 수도 있고 뭣도 있고 다 좋은데 예를 들면은"
"여러분 이런 어떤 컴퓨터에 하드디스크가 됐든 아니면 SSD가 됐든 이 보조기억장치라는게"
"어딘가에 있겠고 그 파일이라고 말하는 것은 이 안에 저장되어 있겠죠"
"근데 제가 이거를 뭐 대략한 1.4x 메가바이트 가량 되는 것 같다라고 이제 여기서 출발을"
"했어요. 이렇다라고 하고 이렇다라고 가정을 하고 이제 출발을 했어요"
"그러면 여기서 이제 중요한 게 뭐냐면 여기서 일어나는 일을 제가 순서대로 계속 그려볼"
"테니까 잘 따라가세요"
"소켓의 본질이 이제 뭐라 그랬냐면 제가 file 이라고 그랬는데 여기에다 대고 입출력이"
"일어나는 거거든요"
"그런데 이런 입출력이 일어날 때는 이 file 혹은 소켓에 어테치된 뭐가 있기 마련이냐면"
"메모리 공간 즉 버퍼가 있기 마련이에요"
"이 버퍼가 있으면 Buffered I/O를 하는 거고 이거 없이 입출력을 직접 해버리면"
"non-buffered IO를 하게 됩니다"
"자 그런데 이제 문제는 뭐냐면은 이 소켓에도 버퍼가 있지만 이 서버 프로그램 있죠"
"이 프로그램 안에서도 개발자가 분명히 어떤 파일 같은 거를 읽어 와야 되잖아요"
"그래서 여기에도 버퍼가 이렇게 또 있을 거예요"
"분명히 그럼 이게 크기가 얼말까 이거는 뭐 이제 개발자가 정하기 나름이에요."
"개발자가 정하기 나름인데 그러면 이게 어떻게 되는 거냐면 이 버퍼를 이제 그 프로세스에서"
"연결된 얘가 관리하는 버퍼입니다."
"이 밑에 버퍼는 소켓 입출력 버퍼구요."
"그러면 이게 어떤 일이 나냐."
"아 이런 파일을 보내야겠어."
"이 파일명을 예를 들어서 뭐 a.bmp 비트맵 파일이라고 한번 해볼게요."
"그러면 이 파일이 1.4MB 잖아요."
"그럼 버퍼의 크기는 얼마가 되냐?"
"1.4MB가 되냐?"
"그렇지는 않구요."
"이거는 이제 이 프로그램을 개발하는 사람, 프로그래머가 결정을 해요."
"자기가 결정을 해요."
"그냥 뭐 진짜 1.4MB를 몽땅 메모리에 올릴 수도 있고, 그 일부를 메모리에 올릴 수도"
"있어요. 그런데 비트맵 파일이니까 그림이라고 생각을 하고, 제가 이제 이렇게 한번 표현을"
"해볼게요. 예를 들어서 이런 직소 퍼즐 아시죠?"
"직소 퍼즐을 한번 제가 간단하게 그려볼게요."
"예를 들면 퍼즐 같은 게 있으면 이런 식으로 되지 않겠습니까?"
"여기 안에 예쁜 그림이 있다고, 풍경이든 뭐든 있다라고 치고요."
"그럼 대략 뭐 이렇게 되겠죠."
"이거 언제 그리죠"
"근데 답답하시겠다"
"아무튼 조금만 기다려주세요"
"금방 그려요 금방 그립니다"
"뭐 대략 하여튼 이런게 있다고 좀 가정해 봅시다 이렇게 블라블라 이걸 더 그리면 좀"
"힘드니까 여기서 끝낼게요"
"블라블라 블라블라 그러면 예를 들면 이렇게 직소 퍼즐이 있으면 여기서부터 요만큼을 많이"
"잘라온다고 쳐요."
"여기서부터 5개만 잘라올까요?"
"이렇게 5개만 잘라서 여기 버퍼에다가 이렇게 쏙 보내는 거예요."
"그러면 저기에 있던 직소 퍼즐 5개가 이리로 넘어오겠죠"
"그러니까 메모리에다가 그 원본 파일이라고 말할 수 있는 곳에 있는 데이터를 긁어와서 이렇게"
"카피해 가지고 이쪽에다가 집어 넣는 거죠"
"이런 식으로 자 제가 퍼즐 조각 하나도 지금 똑같이 최대한 그렸는데 어떻게 똑같나요"
"자 5개를 이렇게 가져와요"
"그러면 이게 이제 이렇게 읽어오는 것, 이렇게 읽어오는 것이 아마도 어쩌면 이게 굳이"
"번호를 붙이면 1번쯤 되겠네요."
"어쨌든 이렇게 읽어와서 프로세스가 메모리를 담아요."
"사실 이제 네트워크 공부할 때 이런 것까지 알아야 되냐라고 생각하실지 모르겠는데 그래도"
"알아 놓으세요."
"이렇게 외우세요."
"이렇게 작동하는구나 라고 외우기만 하면 되요."
"나중에 까먹으면 이 영상 다시 보시고 자 그러면 어떻게 되냐면 버퍼에다가 일단 옮겨"
"왔잖아요. 그러니까 이쪽으로 기본적으로 요거는 카피를 뜨는 거죠."
"카피해서 메모리에다가 올리는 거고 그러면 이 버퍼 즉 process가 쓰는 버퍼에서"
"이쪽으로 또 카피가 일어나요."
"근데 이때는 이거는 입출력을 한다고 했잖아요"
"그럼 네트워크에서 입출력이라는 건 뭐냐"
"이거는 이제 send 혹은 receive죠"
"근데 지금은 이제 이 서버니까 얘가 하는 일은 파일을 send 하는 거거든요"
"그럼 보낼 데이터를 읽어온 거죠"
"그러면 이 전체에 대해서 이렇게 send 할게요 라고 하는 순간 역시 또 카피가 일어납니다"
"그래서 이 조각이 지금은 제가 이렇게 잘라서 그렸는데 이걸 뭉뚱 그려서 그리면 이렇게 한"
"덩어리겠죠 만약에 뭐 이렇게 대충 이렇게 이렇게 이렇게 한 덩어리로 그렸다면 아마 이랬겠죠"
"한 덩어리로 그렸다면 그래서 이런 어떤 하나의 블록을 가져와서 이 블럭 덩어리를 가져와"
"가지고 담은 다음에 그대로 옮겨서 이때부터 전송이 일어나거든요."
"전송이 일어나는데 이 지점, 유저 모드에서 커널로 넘어갈 때 TCP 스택, TCP를"
"만나죠. 이걸 Layer4죠."
"이때 뭐가 일어나냐면 이 지점에서 분해가 일어납니다."
"즉 이렇게 통으로 붙어있는 요거를 분해해서 잘라요."
"이거는 저기 퍼즐이니까 이렇게 잘라서 제가 그린 거지만 사실은 네트워크로 보낼 때 잘려요"
"이렇게 잘려서 올라가는 게 아니고 이건 비유적인 거니까 이해해 주시고 그럼 tcp 쪽에서"
"이게 io가 일어나서 네트워크로 보내죠"
"그러면 이때 분해가 난다고 했는데 자 이때 이 파일에 어테치되어 있을 때 요 데이터들 있죠"
"요런 거라던가 요런 거 이때 데이터 단위를 뭐라고 보시면 되냐면 기본적으로 스트림이다"
"그러니까 이 스트림은 언제 끝나냐면 이 파일 전체를 읽어서 보내야 끝나죠"
"하여튼 시냇물이 흐르듯이 졸졸졸졸 읽어서 하나 읽고 그 다음 거 읽고 그 다음 거 읽고"
"계속 보낼 거예요"
"문제는 이게 TCP 스택을 만나서 세그멘테이션이 나는데 그러면 쉽게 말해서 이걸 이렇게"
"자른다는 얘기에요"
"이렇게 이렇게 잘라요"
"그러면 이 분해, 세그멘테이션이 나는 순간 예를 들어서 여기서 이 패킷 하나를 집어 왔다가"
"요거 하나를 세그먼트 하나를 가져왔다고 쳐요"
"그럼 이 세그먼트를 하나 이렇게 가져와서 잘라요"
"그러면 요거 하나가 말 그대로 세그먼트가 되는 거예요"
"여기서 요렇게 그러면 얘가 이제 tcp 같은 경우는 순서 개념이 있어요."
"그래서 이제 잘라 왔잖아요."
"번호가 항상 이렇지는 않은데 개념상은 비유적으로 1하고 쉽게 말해서 숫자를 붙여요."
"너가 1번이야. 너 1번."
"그러면 그 오른쪽에 있는 애는 너 2번, 3번, 4번, 5번."
"각자 번호표를 붙여주는 거예요."
"그러니까 여기 파일에 뭐가 있을 때는 이런 번호 개념이 없었는데 여기 번호가 붙는 거죠."
"그런 다음에 이제 어떻게 되냐면 이렇게 세그먼트화 된 게 한 층을 내려가요."
"한 층을 또 내려가니까 여기로 간다는 얘기죠."
"여기로 가요. 그럼 이걸 좀 여기로 내려가요."
"이제 그러면 이 지점에서는 어떻게 될까요?"
"이게 좀 위치가 좀 애매하니까 여기다 빼서 그릴게요"
"제가 그럼 어떻게 되는 거냐면 이게 IP는 저기 패킷이라는 말을 하면서 이런 말씀 많이"
"드리죠 그 무슨 얘기 많이 했냐면 택배다 택배다"
"뭐 이런 얘기 많이 말씀드렸었어요"
"그죠 택배다"
"그러니까 이렇게 박스를 준비한 다음에 거기에다가 요 세그먼트 있죠"
"요거 요 자식을 이렇게 가지고 와요"
"얘를 가지고 와서 저 세그먼트를 여기에다가 쏙 집어넣어요"
"그래서 얘가 이제 포장이 끝나면은 이렇게 포장이 끝나면은 어떻게 되냐면은 이제 완벽하게"
"박스 형태가 되겠죠"
"그러니까 이 박스 속에는 바로 저 세그먼트 1번이라고 번호가 붙은 조각 하나가 이 안에"
"들어있는 거고 이렇게 해서 박스가 만들어지고 여기에 이제 송장이 가서 붙겠죠"
"자 그러면 이게 뭐다 그렇죠"
"이게 패킷이 되는 겁니다"
"그러면 패킷이 되서 L3, 그러니까 얘는 이제 L3죠."
"그러니까 여기까지 내려오면 패킷이 만들어진 거예요."
"이렇게 해서 조각 하나가 만들어지는데 여기에서 이제 일로 내려가거든요."
"그럼 이제 L2로 가는 거죠."
"최종적으로는 이렇게 밖으로 나가겠습니다만."
"그럼 어떻게 되는 거냐?"
"제가 설명할 때 뭐라고 말씀드렸냐면 택배로 제가 말씀드렸을 때 택배 기사님께서 우리 집에"
"오신다. 그죠?"
"택배 기사님이 오시면 기사님께 이거 전달해 드린다"
"그랬죠. 그럼 우리 기사님께서는 어떻게 하시냐면은 이걸 올 때 그냥 오신 게 아니죠"
"트럭 한 대 물고 오시지 않습니까"
"이렇게 트럭 한 대 물고 오셔가지고 이 트럭을 타고 와서 이 트럭 속에다가 요 지금 택배를"
"이렇게 쏙 집어 넣겠죠",
"그러면 이 트럭이라고 하는 거 요거가 어떤 의미이냐면 얘가 프레임 쯤 됩니다"
"이게 프레임 쯤 되요"
"그래서 이 프레임 형태로 쭉 가요"
"그런데 이제 중요한 것은 여러분이 명심하셔야 될 것 중에 하나가 이 트럭이라고 제가 했는데"
"이 트럭이라는 것이 목적지까지 한 방에 가나요"
"그러니까 어딘가 배송이 일어날 때 기사님이 그 트럭으로 예를 들면 내가 택배를 지금"
"제주도로 보내야 되는데 제주도까지 이 트럭이 가요"
"그건 아니죠"
"트럭에서 또 갔다가 바뀌었다가 어디 갔다가 거기서 또 끊어졌다가 다른 트럭 탔다가 계속"
"바뀌죠 그래서 패킷이라는 거는 만들어지면은 뭐 그나마 얘는 유지가 되는데 이 프레임이라고"
"하는 것은 수시로 바뀌어요"
"그 유통 과정에서 계속 트럭을 갈아타요"
"이 사실을 잘 좀 기억해 놓으세요."
"잘 좀 기억해 놓으십시오."
"이렇게 해서 데이터가 가요."
"그러면 이제 수신하는 쪽에서는 어떤 일이 벌어질까."
"자 이렇게 해서 뭐 산 넘고 물 건너 바다 건너 어쩌고 저쩌고 블라블라 해서 이 목적지까지"
"트럭이 이렇게 가겠죠."
"이렇게 갈 겁니다."
"그러면 이 트럭에서 이 데이터가 이렇게 오면 이 트럭이 여기 이제 왔어요."
"그러면 거꾸로 정반대의 일이 일어나지 않을까요?"
"무슨 얘기냐면 트럭이 도착을 했는데 트럭이 도착을 했는데 이 트럭이 뭐 여기 안에서 당연히"
"이건 프레임일 거구요."
"이 프레임일 텐데 이 중요한 건 이 트럭을 제가 만약에 A라고 한다면 아까 보낸 건 B라고"
"하자구요. B 그러면 A와 B가 같을 수는 없죠"
"다른 트럭이 올 거고 중요한 건 여기서 이제 택배 박스가 뿅 하고 나오겠죠"
"자 그러면 이게 거꾸로 이번에는 타고 올라갑니다"
"위로 이렇게 그러니까 처음에 트럭에서 이게 L2죠"
"이제 L2 수준에서 트럭에서 하차가 일어나요"
"그러면 거기서 이제 IP 쪽으로 올리는데 그러니까 패킷이라고 하는 게 이렇게 퉁 하고"
"떨어져 나왔겠죠"
"물론 이제 이 속을 뜯어 보면은 우리가 앞서 보냈던 세그먼트 1번이 들어있을 텐데 요"
"패킷이 이렇게 전달될 거에요"
"그러면 트럭을 타고 기사님이 오셔서 나한테 택배를 전달해 주셨어요"
"그럼 우리 기사님은 되돌아 가시고 끝이죠 택배 즉 프레임 이라는 것이 도착해서 택배 즉"
"패킷이라는 걸 끄집어 내주면 이 프레임은 사라지는 거에요"
"자 그래서 패킷이 나왔는데 패킷은 그 자체가 목적이 아니구요"
"자 여러분 택배가 와요"
"그러면 자 지금부터 잘 생각해보세요"
"택배가 왔어 우와 신난다"
"나한테 뭐가 왔네"
"그럼 여러분이 택배 박스를 딱 뜯어"
"그럼 뜯어 가지고 어떻게 해요"
"그 다음에 알맹이는 버리고 박스를 갔습니까 방금 예라고 한 사람이 있어 분명히 정신 바싹"
"차리세요 박스를 버려 버리죠"
"박스는 소멸해요 내용물을 갖지 어느 누가 박스에 집착합니까"
"그러면 여기에서 다시 이번엔 어떻게 되냐"
"요렇게 쓱 끄집어내요"
"즉 요걸 이제 L3가 되는 거고 요 때 이제 세그먼트 즉 아까 있었던 요 요 요 조각"
"하나를 요게 이제 1번 이잖아요"
"그 1번을 여기서 꺼내요"
"그러면 이렇게 뭔가가 만들어져서 내려오는 과정 있죠."
"이런 과정. 이런 과정에서 점점 뭔가 쌓여가잖아요."
"그러니까 전체적으로 송신하는 과정에서는 항상 어떤 행위가 일어나냐면 주로 여기서는 항상"
"encapsulation. 인캡슐레이션이 일어나요."
"그래서 뭔가 계속 만들어져 나가는데, 수신하는 쪽에서는 어떻게 돼요?"
"거꾸로 정반대로 뭐가 일어나요?"
"여기는 이제 디캡슐레이션이 일어나는 거죠."
"그래서 이렇게 해서 계속 데이터가 쌓여 오는데, 문제는 여기서 얘가 만약에, 얘도"
"프로세스이긴 하지만, 이거 크롬이라고 할까요?"
"이것이 파일이 되겠죠."
"그러면 이것이 이제 본질이 소켓 파일인데 얘도 이제 소켓 이라고 부를 거고 그 보내는 쪽과"
"마찬가지로 여기도 어때요"
"이것에 대한 입출력을 하기 위한 메모리 버퍼가 있겠죠"
"그럼 어떻게 되냐면 이 알맹이를 딱 끄집어내서 이 세그먼트로 날아왔을 때 그게 이 조각"
"하나가 일로 올라가요"
"그러니까 여기에 1번 세그먼트가 이렇게 와서 쌓이는 거죠"
"이렇게 그런데 지금 이 I/O 버퍼에다가 이렇게 뭔가 세그먼트를 쌓아주는 것은 운영체제의"
"뭐가 한다? tcp"
"스택에서 여기를 채워줘요"
"자 그럼 하나가 들어 찼고 여기 이만큼의 여유 공간이 아직 남아 있죠"
"여유가 있어요. 자 그러면 이 프로세스 쪽도 마찬가지입니다."
"크롬 브라우저 같은 예를 들어서 이쪽이다 그러면"
"얘도 여기 여기하고 연결된 버퍼 같은 게 이렇게 있기 마련이에요."
"버퍼가 있겠죠."
"그러면은 이 프로세스는 IO 버퍼로부터 뭘 하냐"
"여기 있는 걸 끄집어내서 일로 옮겨 줘야 돼요."
"옮겨 줘야 돼요"
"그거를 이제 소위 리드인데 개념적으로는 리드인데 네트워크 이니까 이걸 뭐라고 그러냐면은"
"리시브 라고 하는 거죠"
"그러면 이때 이제 리시브를 시도할 때는 이 전체 사이즈만큼 리시브를 시도하려고 할 거거든요"
"근데 이제 중요한 것은 속도차가 있어요"
"속도차 속도차에 대해서 생각을 좀 하셔야 돼요"
"속도차 뭐냐면은 네트워크에서는 계속 여기를 채워 나가요"
"그런데 이걸 퍼올리는 이 프로세스 쪽에서는 이거를 한쪽에서는 채움이고 네트워크는 채우고 안"
"잡고 이 프로세스는 여기에서 뭐해요?"
"비움, 비워내고 있어요"
"그래서 여유 공간을 지속적으로 확보하고 있어요"
"이게 마치 톱니바퀴 돌듯이 동시에 일어나요"
"그러니까 네트워크에서 빡 날아오면서 한쪽에는 채워지고 그리고 그게 채워짐과 동시에 누군가는"
"퍼내고 이게 동시사건으로 일어나요"
"tcp 에서는요 이 segment 라고 하는 거 자 아까 지금 그 1번 말고 또 뭐 있어요"
"2번 3번 4번 5번 줄 서 있었잖아요"
"그러니까 이제 하나가 갔죠"
"그러면은 얘는 이제 하나를 아까 보냈잖아요"
"그 다음에 이제 이어서 어떻게 되는 거냐면은 이어서 어떻게 되는 거냐면 여기 이제 또"
"2번을 미리 또 이렇게 만들어 놔요"
"2번 조각이 대략 뭐 이런 식으로 생겼네요"
"2번이죠 그러면 이제 이거 말고 또 3번도 이렇게 대기하고 있을 거 아니에요"
"3번도 그럼 3번 같은 애도 이런 식으로 대기하고 있겠죠"
"이렇게 이런 식으로 그러면은 이 하나를 아까 그 보내는 쪽에서 이걸 보냈잖아요"
"그리고 나서 2번을 바로 보낼 수도 있고 아니면 wait를 할 수도 있어요"
"그게 약간 내부의 복잡한 타이머로 결정이 나는데 그런 얘기는 지금 안 하는 게 좋을 것"
"같아요 그래서 일단 1번을 보내고 그러고 나서 특별한 이유가 없다면 2번을 바로 보내요"
"그러니까 처음에 1번 날아가구요"
"1번 날아가고 그 다음에 이제 곧바로 이어서 이제 2번도 이렇게 전송을 하게 됩니다"
"2번도 그리고 나서 3번, 4번, 5번 이렇게 쭉 나올텐데 문제는 뭐냐면은 그 2번이 1번"
"전달 때랑 똑같은 방식으로 전달되서 수신체계 왔다고 쳐요."
"그러면 2번이 뭐 이런 식으로 와서 전달이 되겠죠."
"모양이 맞나 모르겠네요."
"2번 이렇게 그러면 2번이 이렇게 왔는데 2번이 왔는데 그러면 요만큼까지 버퍼가 채워진"
"거죠. 이렇게 그러면 여유는 줄어든 거죠."
"이렇게 여유는 주는 거죠."
"자 이때 그 여유라는 게 있는데 이때 이제 이게 수신 측에서 tcp 는 이제 그 커넥션"
"오리엔티드 연결지향이다 보니까 이렇게 해요"
"뭔가 오잖아요 근데 이제 운영체제가 tcp 가 잘 받았잖아요"
"데이터를 그러면 어 내가 잘 받았어 라고 피드백을 줘요"
"여기서 여기서 이렇게 피드백을 주는데 그걸 이제 acknowledgement 라고 해요"
"그런데 지금 몇 번까지 받았죠?"
"2번. 그러니까 이때 이렇게 3 이렇게 acknowledgement가 가요."
"그러니까 3번이라는 얘기는 뭐냐면 3이 간다."
"그러니까 3이 왔다는 얘기는 1, 2까지 잘 받았다는 뜻입니다."
"그러니까 예를 들어서 보내는 애 쪽에서는 뭔가 송신을 하잖아요"
"그리고 일정 수준이 지나면 이때 웨이트를 걸어요"
"내가 하나 두 개를 보냈는데 받은 놈이 잘 받았나?"
"그래서 기다려요."
"뭘 기다리냐?"
"acknowledgement 3이 오기를 기다려요"
"이렇게 기다렸는데 마침 받은 애가 3을 보낸 거죠"
"3을 보냈으니까 오 그러면 이제 얘가 acknowledge 3이 왔네"
"그러면 ok 잘 왔어"
"그러면 그 다음에 정말로 3번을 다시 이제 보내는 그래서 이게 계속 반복되죠"
"계속 반복되고요."
"근데 이제 문제가 좀 있어요."
"지금 그 여기 리드를 한다고 말씀드렸는데 이 프로그램, 즉 크롬 같은 애가 빠르게 여기에서"
"이제 입출력 버퍼에 수신된 거를 이렇게 비워내서 위로 올려 줘야 되거든요."
"무브를 시켜 줘야 돼요."
"즉 그러니까 이 조립이 일어나서 이렇게 1,2가 합쳐져 가지고 이렇게 생긴 애를 이렇게"
"생긴 애를 이렇게 한 방에 합쳐 가지고 이제 얘가 1이고 2일텐데 이렇게 합쳐져서"
"비워주면은 이 여유가 이제 이때는 반대로 이만큼 늘어나겠죠."
"여유공간이 쭉 늘어나겠죠."
"이 acknowledgement가 갈 때는요 항상 같이 따라가는 게 뭐냐면은 같이"
"따라다니는 게 뭐냐면 이 에크가 갈 때 여기에 어테치되는 정보가 여러 곳 있는데 여유"
"공간의 크기도 같이 날아갑니다."
"그래서 TCP는 뭔가 데이터를 보내려고 할 때 상대방이 받을 수 있는 여유 공간이 있는지"
"이걸 따져요."
"그래서 따져 가지고 여유 공간이 있으면 보내고 없으면 못 보냅니다."
"자 없으면 못 보네요."
"자 이런 형태로 작동을 한다."
"근데 이제 제가 왜 이 여유공간 이런 것까지 얘기를 하냐면은 자 이렇게 되는 겁니다."
"예를 들어서 이 네트워크에서 데이터가 항상 잘 가면 좋은데 이 네트워크라는 것이 생각보다"
"불안정하거든요."
"그래서 여기서 장애가 발생하는 경우가 많은데 가장 대표적인 TCP 관련되어 가지고 장애가"
"뭐가 있냐면 일단 그 맨 밑단 즉 하드웨어 수준에서 나는 것 중에 하나가 즉 네트워크"
"수준에서 날 수 있는 장애주가 중의 하나가 뭐냐면 첫번째가 로스입니다."
"로스트 세그먼트 그러니까 뭔가 잃어버린 거에요."
"그러니까 여기서 유실된 거죠."
"내가 유실된 것이 아니고 택배가 오다가 유실된 거에요."
"그럼 어디서 유실되는지 나도 모르지."
"물류센터에서 확인을 좀 해야 되겠죠."
"그래서 이렇게 유실되거나 아니면 또 어떤 경우가 있냐면 이게 복잡한 타이머로 정교하게 도는"
"거 거든요. 아까 그 에크 같은 거 이런 거 보낸다고 했잖아요."
"그러니까 뭔가 받으면 나 잘 받았어 해줘야 되거든요"
"근데 이제 그게 안 오더라도 보낸 애는 잘 받겠거니 하고 일정 수준 보내요"
"근데 얘가 응답이 없으면 왜 안 오지?"
"이렇게 되는 방식이에요"
"근데 이제 만약에 보냈는데도 불구하고 얘가 응답이 없어 이상하다 그러면은 왜 안 오지?"
"받았단 말을 안 하네?"
"그래서 보낸 애가 다시 보낼 때가 있어요"
"그래서 retransmission을 할 때가 있어요"
"그러면 이제 웃긴 게 뭐냐면 아주 간발의 차로 내가 에크를 보낸 거와 동시에 상대방도 보낸"
"거야 그러니까 나 3번 받았어 라고 했는데 얘가 보내버린 거야"
"그럼 어떻게 될까"
"에크가 어 나 받았는데 얘가 또 다시 보낸 걸 수도 있잖아"
"그러니까 무슨 얘기냐면 1번하고 2번을 보냈는데 보내는 애가 그래서 자기는 에크나리지먼트"
"3이 올 줄 알고 기다렸는데 안 와 일정 시간을 기다려도 그럼 어떻게 하냐면 보낸 애는"
"1,2를 다시 보내요."
"그러면 이 받는 애는 1,2를 받았다고 3을 보냈는데 보내자마자 1,2가 또 와."
"그러면 얘 이제 왜 재전송 됐지?"
"근데 어쨌거나 얘는 받았다고 acknowledgement를 또 보내."
"그러니까 이제 어떤 현상이 벌어지냐면 acknowledgement가 어떻게 되냐"
"이게 듀플리케이트, 중복돼서 여러 번 가는 거예요."
"그러니까 뭔가 아귀가 안 맞는 거죠."
"손발이 우리가 안 맞다라고 하는 것처럼 이렇게 뭐가 안 맞아 떨어지고 보낸 걸 또 보내고"
"받은 걸 받았다는 회신을 두 번 보낸다거나 이런 일이 벌어져요."
"이렇게 그 다음에 이제 좀 이런 경우도 있고 요거랑 연장선에서 이제 가끔 어떤 경우가"
"있냐면 이런 경우도 있어요."
"어떤 경우가 있냐면 out of order가 있는데 이런 경우는 뭐냐면 예를 들어서 1번"
"오고 2번 오고 3번 와야 되잖아요"
"근데 1번 오고 2번 왔는데 그 다음에 2번 왔는데 갑자기 3이 안 오고 그냥 4가 와버린"
"거야 그러면 3은 얜 어떻게 된 거지?"
"이렇게 되잖아요"
"그러면 이제 4를 수신하는 순간 수신하는 쪽에서는 3번이 안 온 거잖아요"
"아니면 4가 오고 3이 와버린다거나 간발의 차로 뒤늦게 이런 형태를 out of"
"order라 그래요. 순서가 잘못된 경우."
"그럼 이런 것도 일정 수준에서 이 tcp stack에서 이 운영체제 수준에서 여기서 보정을"
"하게 됩니다. 자 그 다음에"
"이런 것들은 이제 어쨌든 따져보면은 로스가 났다."
"이건 100% 네트워크 상에서 뭔가 오류가 있는 거죠."
"근데 리트랜스미션이나 듀플리테크 에이크가 낫다거나 이런 거 있죠."
"이거는 네트워크 일 수도 있고 아니면 그 엔드포인트 간에 뭔가가 합이 안 맞아 가지고"
"문제가 난 것일 수도 있어요."
"근데 아웃 오브 오더가 나왔다"
"이건 거의 이건 네트워크 상에서 뭔가 또 이슈가 있는 겁니다"
"근데 이제 이거 말고 어떤 경우가 있냐"
"이런 경우도 있어요"
"뭐가 있냐면은 이제 그 제로 윈도우라고 하는데 이 제로 윈도우는 뭐냐면 제가 아까 그 여유"
"공간이라고 했죠."
"그러니까 수신 측에서 이 지점이 있죠."
"이 여유 공간의 메모리 크기를 뭐라고 그러냐."
"윈도우 사이즈라고 불러요."
"이 여유 공간의 크기를."
"근데 이게 만약에 제로가 됐다고 한다면 이건 뭘 의미하는 걸까?"
"네트워크는 안정적으로 데이터를 계속 채워서 여기를 싹 채웠는데 이 프로그램이 이걸 빨리"
"비워 줘야 되는데 왜 그런지 모르겠는데 안 비운 거예요"
"그러니까 여기가 풀이 난 거지"
"여기가 이 비워주는 공간이 이제 풀이 난 건데 쉽게 생각해서 네트워크의 송수신 속도가 이"
"프로세스가 이걸 비워내는 처리 속도 그거보다 더 빨라 버린 거죠"
"그러면 여기가 꽉 차게 되고 그럼 어떻게 되냐면은 저게 꽉 찬 상태에서는 뭔가 송신자가"
"데이터를 보내도 수신을 할 방법이 없어요."
"그러니까 만약에 이제 받는 애가 acknowledgement를 하는데 여유 공간이 없다,"
"0이다. 그게 제로 윈도우에요."
"그럼 이런 경우는 확실하게 말할 수 있다."
"이거는 엔드포인트 단계에서 이 엔드포인트에서 어플리케이션이 있죠."
"얘가 뭔가 어떤 이유로든 데이터를 빨리 안퍼간거에요."
"CPU가 점유율이 100이라서 그런건지 뭔지 모르겠지만."
"그러니까 문제가 났을 때, 즉 장애가 났을 때 그 원인을 어디서 찾아야 한다?"
"이 프로그램에서 찾으셔야 돼요."
"뭔가 하드웨어적인 이슈가 있는지 뭔지 모르겠지만 그쪽에 이슈가 있다."
"그런 겁니다."
"그래서 이렇게 되어 있어요."
"이제 전체의 그림을 한번에 보자면 대략 이렇게 되는 거죠."
"큰 틀에서 복습을 좀 하자면 이렇게 되는 거죠."
"이 보내는 측, 샌드하는 쪽에서는 일정 수준의 블록 데이터를 읽어 가지고요 그거를 프로세스"
"내부에 버퍼 메모리에 이렇게 담아요"
"그래서 여기서 읽는 게 1번, 여기에 담는 게 2번, 그걸 송수신 하는 그 IO 버퍼라고"
"하죠. 여기다 옮겨요."
"그게 3번이구요."
"그럼 이렇게 쭉 타고 내려가면서 인캡슐레이션이 일어난다."
"그래서 인캡슐레이션이 일어나서 쭉 이동을 하게 되는 거죠."
"이렇게 4번 이동을 하게 돼요."
"수신한 쪽에서는 이때는 거꾸로 디캡슐레이션이 일어난다."
"5번. 그리고 거기에서 세그먼트 하나를 끄집어내서 이 또 그 수신측 입출력 버퍼에다가 담게"
"되는 거죠. 그리고 그걸 다시 어플리케이션이 이렇게 퍼서 비워낸 다음에 처리로 가는 건데"
"이 과정 중에 뭔가 아다리가 안 맞아버리는 현상이 나면 그때 장애가 발생한다."
"그래서 대표적인 TCP IP 통신장애 유형이 대략 이와 같습니다."
"그러니까 다섯가지죠."
"로스트 세그먼트, 아예 잊어버리는 경우, 그 다음에 뭐 재전송이 되거나 순서가 이제 뭐가"
"잘못되거나 아니면 재전송 과정에서 에크나리지먼트가 듀플리케이트 된다거나 그 다음에 이제"
"제로 윈도우라고 해서 여유 공간이 없어지는 경우가 발생한다거나 이런 경우 이런 것들이"
"발생했을 때 어떻게 대응해야 되냐"
"일단 적어도 이제 이게 네트워크인지 엔드포인트인지 따져보셔야 되겠죠"
"그런 차원에서 이런 전체적인 플로우를 좀 알고 계시면 굉장히 도움이 될 거다."
"이 영상 지금 거의 시간이 조금 됐는데 여러분들이 이 내용을 보시고 한번에 이해가 안 되실"
"수도 있어요."
"그래서 여러번 다시 보셨으면 좋겠어요."
"이런 식으로 작동한다는 것을 알고 있으면 네트워크 장애 대응할 때도 좋아요."
"그래서 전체적인 개념이 이렇구나 라고 기억을 해두시고 지금까지 우리가 공부한 것들을 합쳐서"
"얘기를 한번 해봤어요."
"그 다음에 이제 아직 배우지 않았지만 TCP라는 통신을 할 때 여기 굉장히 중요한 개념이"
"하나 들어간다는 거 아시겠죠?"
"어떤 거? 순서라는 개념이 있죠."
"TCP는. 그래서 데이터가 순서대로 와야 되는데 결국 이게 연결이에요."
"연결이라는 것, 나중에 TCP 연결이라는 것은 별거 없습니다."
"밀접하게 관련되어 있어요."
"하여튼 그렇다."
"그래서 지금 복습, 종합적인 복습이자 동시에 예습을 한 번에 끝내봤습니다."
"이 영상 한 번에 이해하려 하지 마시고요."
"일단 여기까지 보시고 tcp 공부까지 끝난 다음에 다시 한번 이 영상 보시라고 권해드리고"
"싶습니다. 네 좀 영상이 길었는데 잘 따라오셨나 모르겠네요."
"일단 또 끊고 가도록 하겠습니다."
